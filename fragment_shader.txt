#version 330 core

// Ouput data
out vec3 finalColor;


// uniform vec4 ourColor;
in vec3 vertexColor;
in vec2 uv;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;


uniform sampler2D my_texture_sampler;
uniform vec3 LightPosition_worldspace;

void main()
{

	vec3 light_color = vec3(1,1,1);
	float light_power = 50.f;

	// Materia properties
	vec3 material_diffuse_color = texture(my_texture_sampler, uv).rgb;
	vec3 material_ambient_color = vec3(0.1,0.1,0.1) * material_diffuse_color;
	vec3 material_specular_color =vec3(0.3,0.3,0.3);

	float distance = length(LightPosition_worldspace - Position_worldspace);

    vec3 n = normalize(Normal_cameraspace);
    vec3 l = normalize(LightDirection_cameraspace);

    float cosTheta = clamp(dot(n,l), 0,1);

    vec3 E = normalize(EyeDirection_cameraspace);
    vec3 R = reflect(-l,n);

    float cosAlpha = clamp(dot(E,R),0,1);

	finalColor = material_ambient_color
	+ material_diffuse_color* light_color * light_power * cosTheta / (distance*distance)
	+ material_specular_color * light_color * light_power * pow(cosAlpha,5) / (distance*distance);
}